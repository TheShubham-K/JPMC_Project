From ee90687ebd68759e984dbd0b5d81e1881c561e6a Mon Sep 17 00:00:00 2001
From: Shubham <subham.kumar032@gmail.com>
Date: Sat, 25 Apr 2020 20:21:23 +0530
Subject: [PATCH] Create Patch File

---
 0001-Create-Patch-File.patch | 115 +++++++++++++++++++++++++++++++++++
 src/App.tsx                  |  22 +++----
 src/Graph.tsx                |   6 +-
 3 files changed, 128 insertions(+), 15 deletions(-)
 create mode 100644 0001-Create-Patch-File.patch

diff --git a/0001-Create-Patch-File.patch b/0001-Create-Patch-File.patch
new file mode 100644
index 0000000..66fa2fe
--- /dev/null
+++ b/0001-Create-Patch-File.patch
@@ -0,0 +1,115 @@
+From e8bd9aed60a05b3cad3fcc69e4e5afe042ae2272 Mon Sep 17 00:00:00 2001
+From: Shubham <subham.kumar032@gmail.com>
+Date: Sat, 25 Apr 2020 20:11:08 +0530
+Subject: [PATCH] Create Patch File
+
+---
+ src/App.tsx   | 26 ++++++++++++++++++++------
+ src/Graph.tsx | 15 ++++++++++++---
+ 2 files changed, 32 insertions(+), 9 deletions(-)
+
+diff --git a/src/App.tsx b/src/App.tsx
+index 0728518..d4b5d04 100755
+--- a/src/App.tsx
++++ b/src/App.tsx
+@@ -8,6 +8,7 @@ import './App.css';
+  */
+ interface IState {
+   data: ServerRespond[],
++  showGraph: boolean, /**A boolean is added. */
+ }
+ 
+ /**
+@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
+       // data saves the server responds.
+       // We use this state to parse data down to the child element (Graph) as element property
+       data: [],
++      showGraph: false, /** This is to let user see the graph when clicked the 'Start Streaming Data'*/
+     };
+   }
+ 
+@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
+    * Render Graph react component with state.data parse as property data
+    */
+   renderGraph() {
+-    return (<Graph data={this.state.data}/>)
++    if (this.state.showGraph){
++      return (<Graph data={this.state.data}/>) /** TO ensure that the graph doesn't render until clicks the 'Start Streaming Button'*/
++    }
+   }
+ 
+   /**
+    * Get new data from server and update the state with the new data
+    */
+   getDataFromServer() {
+-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+-      // Update the state by creating a new array of data that consists of
+-      // Previous data in the state and the new data from server
+-      this.setState({ data: [...this.state.data, ...serverResponds] });
+-    });
++    let x = 0;
++    const interval = setInterval(() => {
++          DataStreamer.getData((serverResponds: ServerRespond[]) => {
++              // Update the state by creating a new array of data that consists of
++              // Previous data in the state and the new data from server
++              this.setState({ 
++                data: serverResponds,
++                showGraph: true,
++             });      
++          });
++          x++;
++          if (x > 1000){
++          cleanInterval(interval);
++          }
++    }, 100);
+   }
+ 
+   /**
+diff --git a/src/Graph.tsx b/src/Graph.tsx
+index ec1430e..0e6566a 100644
+--- a/src/Graph.tsx
++++ b/src/Graph.tsx
+@@ -14,7 +14,7 @@ interface IProps {
+  * Perspective library adds load to HTMLElement prototype.
+  * This interface acts as a wrapper for Typescript compiler.
+  */
+-interface PerspectiveViewerElement {
++interface PerspectiveViewerElement extends HTMLElement {
+   load: (table: Table) => void,
+ }
+ 
+@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
+ 
+   componentDidMount() {
+     // Get element to attach the table from the DOM.
+-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
++    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+ 
+     const schema = {
+       stock: 'string',
+@@ -41,12 +41,21 @@ class Graph extends Component<IProps, {}> {
+       timestamp: 'date',
+     };
+ 
++
+     if (window.perspective && window.perspective.worker()) {
+       this.table = window.perspective.worker().table(schema);
+     }
+     if (this.table) {
+       // Load the `table` in the `<perspective-viewer>` DOM reference.
+-
++      elem.setAttribute('view', 'y_line');
++      elem.setAttribute('column-pivots', '["stock"]');
++      elem.setAttribute('row-pivots', '["timestamp"]');
++      elem.setAttribute('columns', '["top_ask_price"]');
++      elem.setAttribute('aggregates', '
++      {"stock": "distinct count",
++      "top_ask_price": "avg",
++      "top_bid_price": "avg",
++      "timestamp": "distinct count"}');
+       // Add more Perspective configurations here.
+       elem.load(this.table);
+     }
+-- 
+2.17.1
+
diff --git a/src/App.tsx b/src/App.tsx
index d4b5d04..1e1c995 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -42,18 +42,16 @@ class App extends Component<{}, IState> {
   getDataFromServer() {
     let x = 0;
     const interval = setInterval(() => {
-          DataStreamer.getData((serverResponds: ServerRespond[]) => {
-              // Update the state by creating a new array of data that consists of
-              // Previous data in the state and the new data from server
-              this.setState({ 
-                data: serverResponds,
-                showGraph: true,
-             });      
-          });
-          x++;
-          if (x > 1000){
-          cleanInterval(interval);
-          }
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+         showGraph: true,
+       });
+      });
+      x++;
+     if (x > 1000) {
+      clearInterval(interval);
+     }
     }, 100);
   }
 
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 0e6566a..0ea9616 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -42,11 +42,13 @@ class Graph extends Component<IProps, {}> {
     };
 
 
-    if (window.perspective && window.perspective.worker()) {
+    if (window.perspective) {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
+    console.log('change table');
       // Load the `table` in the `<perspective-viewer>` DOM reference.
+      // Add more Perspective configurations here.
       elem.setAttribute('view', 'y_line');
       elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
@@ -56,8 +58,6 @@ class Graph extends Component<IProps, {}> {
       "top_ask_price": "avg",
       "top_bid_price": "avg",
       "timestamp": "distinct count"}');
-      // Add more Perspective configurations here.
-      elem.load(this.table);
     }
   }
 
-- 
2.17.1

